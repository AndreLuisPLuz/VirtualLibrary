// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Api.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91945ac8-f057-4fff-9ea1-939f10666ab6"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3394),
                            Gender = 0,
                            Name = "H. P. Lovecraft"
                        },
                        new
                        {
                            Id = new Guid("0d1fddb4-381c-47ef-a24f-2bfc3a8f4ea0"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3398),
                            Gender = 1,
                            Name = "J. K. Rowling"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("LendingOption")
                        .HasColumnType("int");

                    b.Property<int?>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b31770e7-5655-4d1a-8d54-06cb31b01544"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3655),
                            Description = "A boy learns how to do magic.",
                            ISBN = "9781781100349",
                            LendingOption = 0,
                            PagesCount = 278,
                            Title = "Harry Potter & the Philosopher's Stone"
                        },
                        new
                        {
                            Id = new Guid("52067d00-fdc9-41fe-9e88-e3ec899f9286"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3658),
                            Description = "Dreams point to the return of an old horror.",
                            ISBN = "9789583067341",
                            LendingOption = 0,
                            PagesCount = 179,
                            Title = "The Call of Cthulhu"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be487b42-4952-4015-b122-ed03bbc8b8e3"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3613),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("1a900293-d703-43b7-8658-50f3ac3dff4a"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3615),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("e3860499-a30e-4963-ab35-487a1215ea20"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3617),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("16624fa0-90ae-4fc0-85f6-3f644ab5e5f9"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 27, DateTimeKind.Utc).AddTicks(3618),
                            Name = "Thriller"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.Lending", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DevolutionAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndingAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FineApplied")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FinePaidAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartingAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Lendings");
                });

            modelBuilder.Entity("Api.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3da35f9-7e4f-449d-b617-598161541d3c"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 32, DateTimeKind.Utc).AddTicks(7048),
                            Email = "andreluispluz@gmail.com",
                            Gender = 0,
                            Name = "André",
                            Password = "AQAAAAIAAYagAAAAEKMwjrz2ndtXDY84TeWyv55GmpiqTEi1XPArEoyHaGBmpxOMwMxvkT3cLuC4gbEFCg=="
                        },
                        new
                        {
                            Id = new Guid("c684a7b2-796e-4248-96ed-96a658f3535b"),
                            CreatedAt = new DateTime(2024, 6, 5, 13, 34, 32, 116, DateTimeKind.Utc).AddTicks(6993),
                            Email = "mateus@gmail.com",
                            Gender = 0,
                            Name = "Mateus",
                            Password = "AQAAAAIAAYagAAAAENvOhyKVz21lq4VteHFxVcvvt0ZVvXtskkh8p6sFaRP/xLT+jwPm6JrJ0Id+O/oPEg=="
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("91945ac8-f057-4fff-9ea1-939f10666ab6"),
                            BookId = new Guid("52067d00-fdc9-41fe-9e88-e3ec899f9286")
                        },
                        new
                        {
                            AuthorId = new Guid("0d1fddb4-381c-47ef-a24f-2bfc3a8f4ea0"),
                            BookId = new Guid("b31770e7-5655-4d1a-8d54-06cb31b01544")
                        });
                });

            modelBuilder.Entity("BookGender", b =>
                {
                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenderId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookGender");

                    b.HasData(
                        new
                        {
                            GenderId = new Guid("be487b42-4952-4015-b122-ed03bbc8b8e3"),
                            BookId = new Guid("b31770e7-5655-4d1a-8d54-06cb31b01544")
                        },
                        new
                        {
                            GenderId = new Guid("1a900293-d703-43b7-8658-50f3ac3dff4a"),
                            BookId = new Guid("b31770e7-5655-4d1a-8d54-06cb31b01544")
                        },
                        new
                        {
                            GenderId = new Guid("e3860499-a30e-4963-ab35-487a1215ea20"),
                            BookId = new Guid("52067d00-fdc9-41fe-9e88-e3ec899f9286")
                        },
                        new
                        {
                            GenderId = new Guid("16624fa0-90ae-4fc0-85f6-3f644ab5e5f9"),
                            BookId = new Guid("52067d00-fdc9-41fe-9e88-e3ec899f9286")
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.Lending", b =>
                {
                    b.HasOne("Api.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.User", "User")
                        .WithMany("Lendings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Api.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGender", b =>
                {
                    b.HasOne("Api.Domain.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.Gender", null)
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.User", b =>
                {
                    b.Navigation("Lendings");
                });
#pragma warning restore 612, 618
        }
    }
}
